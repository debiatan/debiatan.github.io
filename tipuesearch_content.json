{"pages":[{"text":"I was born in 1981, but I still got late to the PC party. My first computer was a Pentium 100, 8 MB RAM, 850 MB HDD, 14-inch CRT beast. My parents bought it for my brother and me on December 1995. Some weeks before lugging it home, I was already making preparations. I bought a case of ten 3.5-inch floppies and headed to the local chess club. They had a 486 that people were supposed to use to study and play chess, but it also moonlighted as a software stash for club members under 25. That afternoon I spent twenty minutes swapping floppies in and out of the computer, labeling them as Mortal Kombat II RAR Volume 1/8 , etc. That same procedure would have to be reenacted backwards at home, once a beige box graced my desk with its presence. Was it worth it? Yes. Did I play the game much? I played the hell out of it that Xmas. Why are you telling me this stuff? Because I want to talk about... Compromise Look. In order to play that thing, I had to: Walk twenty minutes to the chess club Pester someone to get my turn at the computer Wait twenty more minutes in front of it Walk back home Spend twenty extra minutes unRARing the stuff After all that, I would have played the game even if it sucked! Maybe it sucked and I didn't notice! I invested some of my time in getting it running so, had it failed to meet my expectations, I would have been left with these two options: Deciding that I was stupid for wasting a perfectly good afternoon Tricking myself into thinking that the game was good Back then, I didn't think of myself as a stupid person, so I would have gone for the second one. Of course, the game was actually good, so it's a moot point. But anyways, what's the moral of the story? Wasting the time of players increases the subjective appeal of games Which is kind of tragic, given today's sorry state of software distribution. People don't go to game stores anymore. They don't ask their friends for games, either. They just wait for the Steam sale, whip out a credit card and pay a visit to the fridge while their game downloads. Where's the compromise in that? We can do better. Up for some unsolicited advice? Thought so. If you're a game developer and want your stuff to be noticed, forget greenlight . What you need is 20th century game distribution and you know it. The days of tapes and floppies may be long gone, but when everything seems lost, you can always count on good old... D.R.M. Here's my proposal: Upload your game somewhere and force your first users to contact you to get an activation key. ( wasted time + social interaction = ugly experience ). Since you don't want to spend all day handing keys over, unload that burden on your players. Make it so that every unlocked copy of your game is capable of generating valid activation keys ( oh this game has to be reaally good if im answering peoples emails just because i wrote in a forum that i was playing it ). ... Profit! That's the gist of the inDRM copy control scheme, my contribution to this year's SIGBOVIK conference . If you want to know more, check the article and browse the associated GitHub repository . List of games using inDRM None so far, but they're coming.","tags":"tools","loc":"http://blog.debiatan.net/inDRM.html","title":"inDRM: Copy control with a personal touch"},{"text":"You may be aware that Barcelona holds a couple dozen Mobile World Congresses a year. However, you probably ignore that there are other technological meetings in Barcelona that far surpass the MWC by any metric you can think of. The QIDV ( Quedadas informales de desarrollo de videojuegos , Meetups about Game Development) are the most prominent example. For the tenth edition of these gatherings, I decided to give a talk to raise awareness of Casey Muratori's Handmade Hero project. I tried to summarize the highlights of the first five weeks in just fifteen minutes, explaining mainly the architectural decisions that support the live code editing capabilities of his platform layer. If you couldn't come but understand Spanish, I invite you to take a look at the recording of the session: Here's just the fun part (the demo) at the end: And here's the whole thing: If you don't feel satisfied by my bare bones explanation of the technical details, please resort to this nicely written post about the subject . If that still doesn't do the trick, you can always watch the original Handmade Hero video . Enjoy!","tags":"tools","loc":"http://blog.debiatan.net/five-weeks-of-handmade-hero.html","title":"Five weeks of Handmade Hero"},{"text":"This weekend I took part in the seventh edition of the Global Game Jam . The goal of the event is to create a game related in some way to a given theme in 48 hours. This year's theme was What do we do now? . Instead of flying solo, as I did last year, I joined two friends: Javi and Esteban. It payed off big time, not only because jamming alone doesn't make any sense (I can code by myself any weekend I so desire -- which is most of them), but also because I jammed in good company and we fucking won the local Barcelona section of the jam . Gorilla-bears chasing dinner. If you want a detailed account on how it went or some technical tips to play the game, I refer you to Javi's write-up . Other than that, here's the profile of the game at the GGJ web page and a link to the game . Enjoy! (UPDATE) Here's the presentation of the game Javi gave at the end of the jam:","tags":"jams","loc":"http://blog.debiatan.net/acampa-como-puedas.html","title":"Acampa como puedas"},{"text":"It seems that building an oscilloscope on top of an Arduino board is some sort of rite of passage. Do a duckduckgo search and you will see that all the good names for this kind of project are already taken, so I have decided to name mine just oscilloscope . In my defense, I'll say that I have written mine because I needed the most basic of oscilloscopes and it's just easier to build one from scratch than to adapt some already existing code. I've written my oscilloscope code it in order to inspect a single-channel periodic signal with a frequency close to 250 Hz. My first trivial attempt at the task already recorded the signal at 5 kHz and transmitted it over USB without the need to buffer data in the RAM of the microcontroller, so I haven't bothered speeding it up. The main bottleneck in my case is the serial transmission. Trying to collect more than 5800 samples per second will likely result in the loss of some of them. I've written some extra code that checks for missing samples, but it never detects problems at 5 kHz and, frankly, I'm OK with twenty samples per cycle. All in all, putting together the C firmware and the Python client, the project takes less than 130 lines. The program that checks for periodicity, finds the frequency and aligns the cycles to display them adds 90 extra lines. The output of this program looks like this: Visualization of several cycles of a PWM signal at 250 Hz after going through a simple RC circuit. Here's the link to the github repository .","tags":"tools","loc":"http://blog.debiatan.net/oscilloscope.html","title":"Oscilloscope"},{"text":"Just to keep the blog rolling, I'm posting this ten-second clip of Guybrush Threepwood coming into existence from some sort of primordial soup of pixels. On the left, you can see the distortion field applied to the original image to deform it. It consists of a field of vectors, each of them centered on a pixel of the image, following a 2D Ornstein-Uhlenbeck process . They are convolved with a Gaussian kernel that grows as the video steps forward.","tags":"thingies","loc":"http://blog.debiatan.net/guybrush.html","title":"Distortion Vector Field"},{"text":"UTBP is a new subparadigm of Declarative Programming, in which code is generated from a description of its intended behavior, specified through unit tests. This work was presented at SIGBOVIK 2014 and received the Most Frighteningly Like Real Research Award. For an in-depth tour of UTBP, you can check the article and browse the associated GitHub repository . If you prefer a light introduction, you can choose between two versions of the same video. This one is dubbed: This one is subbed:","tags":"tools","loc":"http://blog.debiatan.net/utbp.html","title":"Unit-Test-Based Programming"},{"text":"This weekend I participated in the sixth edition of the Global Game Jam . The goal of the event was to create a game related in some way to a given theme in 48 hours. This year's theme was We don't see things as they are, we see them as we are . I decided to go for a multiplayer Gradius clone in which collisions with enemies remap your controls. I developed it using CodeSkulptor , which is basically a Python interpreter running on top of Javascript. Needless to say, it's no speed demon. See for yourself: If you want to give it a try, I have two suggestions to make: Find someone to play against (otherwise is going to look as sad as my single player game above). Run it on Chrome. Here's the profile of the game at the GGJ webpage and a link to the game . Enjoy! Update : Looks like my game placed third on the local vote we held after the Jam! Hooray!","tags":"jams","loc":"http://blog.debiatan.net/gradius-meets-twister.html","title":"Gradius meets Twister"},{"text":"Every once in a while, I need to step outside the command line. Sometimes I'm even forced to interact with deaf graphical programs, those that do not listen to standard input or a meager HTTP port. In those desperate times, were it not for tools such as XAUT or xdotool , I would have to type and click outside of VIM , like cavemen probably did. Those two little programs are enough to make me happy when confronted with an X11 server. However, my computer, of a more whimsical nature, is reluctant to execute binaries other than a Python interpreter (like any other well-meaning general-purpose device assembled during the 21st century, really). That is why I have decided to write the simplest Python library I could think of that is able to: Find out the position of the mouse pointer Move the mouse pointer around the screen Press and release mouse buttons Press and release keys in the keyboard Capture the screen The xrobot library is lean, simple and Python[23]-compliant. It is just a wrapper around functions defined inside python-xlib . Since Xlib screen capture is painfully slow, the python-gtk bindings are used instead, if present. I have decided to return images as numpy arrays for my convenience; if you find that dependency unbearable, you can root it out easily from the code. Here's me, at five hundred clicks/second. I leave you with a link to the xrobot github repository and some sample code: import xrobot xr = xrobot . XRobot () xr . move ( 10 , 10 ) robot = XRobot () x , y = robot . mouse_pos () print ( 'Current mouse position: x =' , x , 'y =' , y ) robot . move ( 10 , 10 ) robot . click ( 1 ) robot . key ( 'a' ) # Press and release 'a' robot . key_down ( 'comma' ) # Press ',' robot . key_up ( 'comma' ) # Release ',' width , height = robot . screen_resolution () print ( 'Screen width:' , width , 'Screen height:' , height ) img = robot . capture_screen () import pylab as pl pl . imshow ( img ) pl . show ()","tags":"tools","loc":"http://blog.debiatan.net/xrobot.html","title":"xrobot"}]}