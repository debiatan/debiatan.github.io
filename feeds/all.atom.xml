<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Transition Dreams</title><link href="http://blog.debiatan.net/" rel="alternate"></link><link href="http://blog.debiatan.net/feeds/all.atom.xml" rel="self"></link><id>http://blog.debiatan.net/</id><updated>2015-11-25T18:00:00+01:00</updated><entry><title>Oscilloscope</title><link href="http://blog.debiatan.net/oscilloscope.html" rel="alternate"></link><updated>2015-11-25T18:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2015-11-25:oscilloscope.html</id><summary type="html">&lt;p&gt;It seems that building an oscilloscope on top of an Arduino board is some sort of rite of passage. Do a &lt;a class="reference external" href="https://duckduckgo.com/?q=arduino+oscilloscope"&gt;duckduckgo&lt;/a&gt; search and you will see that all the good names for this kind of project are already taken, so I have decided to name mine just &lt;em&gt;oscilloscope&lt;/em&gt;. In my defense, I'll say that I have written mine because I needed the most basic of oscilloscopes and it's just easier to build one from scratch than to adapt some already existing code.&lt;/p&gt;
&lt;p&gt;I've written my oscilloscope code it in order to inspect a single-channel periodic signal with a frequency close to 250 Hz. My first trivial attempt at the task already recorded the signal at 5 kHz and transmitted it over USB without the need to buffer data in the RAM of the microcontroller, so I haven't bothered speeding it up.&lt;/p&gt;
&lt;p&gt;The main bottleneck in my case is the serial transmission. Trying to collect more than 5800 samples per second will likely result in the loss of some of them. I've written some extra code that checks for missing samples, but it never detects problems at 5 kHz and, frankly, I'm OK with twenty samples per cycle.&lt;/p&gt;
&lt;p&gt;All in all, putting together the &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; firmware and the &lt;tt class="docutils literal"&gt;Python&lt;/tt&gt; client, the project takes less than 130 lines. The program that checks for periodicity, finds the frequency and aligns the cycles to display them adds 90 extra lines. The output of this program looks like this:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Jiggling periodic wave" src="images/oscilloscope.gif" style="width: 406.0px; height: 306.0px;" /&gt;
&lt;p class="caption"&gt;Visualization of several cycles of a PWM signal at 250 Hz after going through a simple RC circuit.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://github.com/debiatan/oscilloscope"&gt;link to the github repository&lt;/a&gt;.&lt;/p&gt;
</summary><category term="arduino"></category><category term="oscilloscope"></category></entry><entry><title>Distortion Vector Field</title><link href="http://blog.debiatan.net/guybrush.html" rel="alternate"></link><updated>2014-08-25T08:00:00+02:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-08-25:guybrush.html</id><summary type="html">&lt;p&gt;Just to keep the blog rolling, I'm posting this ten-second clip of Guybrush Threepwood coming into existence from some sort of primordial soup of pixels.&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="//player.vimeo.com/video/104247325" frameborder="0" title="Guybrush materializes" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;On the left, you can see the distortion field applied to the original image to deform it. It consists of a field of vectors, each of them centered on a pixel of the image, following a 2D &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ornstein–Uhlenbeck_process"&gt;Ornstein-Uhlenbeck process&lt;/a&gt;. They are convolved with a Gaussian kernel that grows as the video steps forward.&lt;/p&gt;
</summary><category term="graphical effects"></category></entry><entry><title>Unit-Test-Based Programming</title><link href="http://blog.debiatan.net/utbp.html" rel="alternate"></link><updated>2014-04-01T10:00:00+02:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-04-01:utbp.html</id><summary type="html">&lt;p&gt;UTBP is a new subparadigm of Declarative Programming, in which code is generated from a description of its intended behavior, specified through unit tests. This work was presented at &lt;a class="reference external" href="http://www.sigbovik.org/2014/"&gt;SIGBOVIK 2014&lt;/a&gt; and received the &lt;em&gt;Most Frighteningly Like Real Research&lt;/em&gt; Award.&lt;/p&gt;
&lt;p&gt;For an in-depth tour of UTBP, you can check &lt;a class="reference external" href="https://github.com/debiatan/utbp/blob/master/doc/article.pdf"&gt;the article&lt;/a&gt; and browse the &lt;a class="reference external" href="https://github.com/debiatan/utbp"&gt;associated GitHub repository&lt;/a&gt;. If you prefer a light introduction, you can choose between two versions of the same video. This one is dubbed:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="//player.vimeo.com/video/89179353" frameborder="0" title="Unit-Test-Based Programming -- English dubbing" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This one is subbed:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="//player.vimeo.com/video/89182858" frameborder="0" title="Unit-Test-Based Programming -- English subtitles" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</summary><category term="unit tests"></category><category term="SIGBOVIK"></category><category term="automatic programming"></category></entry><entry><title>Gradius meets Twister</title><link href="http://blog.debiatan.net/gradius-meets-twister.html" rel="alternate"></link><updated>2014-01-27T20:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-01-27:gradius-meets-twister.html</id><summary type="html">&lt;p&gt;This weekend I participated in the sixth edition of the &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt; . The goal of the event was to create a game related in some way to a given theme in 48 hours. This year's theme was &lt;em&gt;We don't see things as they are, we see them as we are&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I decided to go for a multiplayer Gradius clone in which collisions with enemies remap your controls. I developed it using &lt;a class="reference external" href="http://www.codeskulptor.org/"&gt;CodeSkulptor&lt;/a&gt;, which is basically a Python interpreter running on top of Javascript. Needless to say, it's no speed demon. See for yourself:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="//player.vimeo.com/video/85182232" frameborder="0" title="Gradius meets Twister" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;If you want to give it a try, I have two suggestions to make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find someone to play against (otherwise is going to look as sad as my single player game above).&lt;/li&gt;
&lt;li&gt;Run it on Chrome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="http://www.globalgamejam.org/2014/games/gradius-meets-twister"&gt;profile of the game at the GGJ webpage&lt;/a&gt; and &lt;a class="reference external" href="http://www.codeskulptor.org/#user36_Z3QPgd5jeF_98.py"&gt;a link to the game&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Looks like &lt;a class="reference external" href="https://gamejambcn.com/gjb-2014/resultats/"&gt;my game placed third&lt;/a&gt; on the local vote we held after the Jam! Hooray!&lt;/p&gt;
</summary><category term="codeskulptor"></category><category term="game"></category><category term="GGJ"></category></entry><entry><title>xrobot</title><link href="http://blog.debiatan.net/xrobot.html" rel="alternate"></link><updated>2014-01-02T10:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-01-02:xrobot.html</id><summary type="html">&lt;p&gt;Every once in a while, I need to step outside the command line. Sometimes I'm even forced to interact with &lt;em&gt;deaf&lt;/em&gt; graphical programs, those that do not listen to standard input or a meager HTTP port. In those desperate times, were it not for tools such as &lt;a class="reference external" href="http://xautomation.sf.net/"&gt;XAUT&lt;/a&gt; or &lt;a class="reference external" href="http://www.semicomplete.com/blog/projects/xdotool/"&gt;xdotool&lt;/a&gt;, I would have to type and click outside of &lt;tt class="docutils literal"&gt;VIM&lt;/tt&gt;, like cavemen probably did.&lt;/p&gt;
&lt;p&gt;Those two little programs are enough to make me happy when confronted with an X11 server. However, my computer, of a more whimsical nature, is reluctant to execute binaries other than a Python interpreter (like any other well-meaning general-purpose device assembled during the 21st century, really). That is why I have decided to write the simplest Python library I could think of that is able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find out the position of the mouse pointer&lt;/li&gt;
&lt;li&gt;Move the mouse pointer around the screen&lt;/li&gt;
&lt;li&gt;Press and release mouse buttons&lt;/li&gt;
&lt;li&gt;Press and release keys in the keyboard&lt;/li&gt;
&lt;li&gt;Capture the screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;xrobot&lt;/tt&gt; library is lean, simple and Python[23]-compliant. It is just a wrapper around functions defined inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-xlib&lt;/span&gt;&lt;/tt&gt;. Since Xlib screen capture is painfully slow, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-gtk&lt;/span&gt;&lt;/tt&gt; bindings are used instead, if present. I have decided to return images as &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; arrays for my convenience; if you find that dependency unbearable, you can root it out easily from the code.&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="//player.vimeo.com/video/83220240" frameborder="0" title="5000 clicks" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p class="caption-text"&gt;Here's me, at five hundred clicks/second.&lt;/p&gt;
&lt;p&gt;I leave you with a &lt;a class="reference external" href="https://github.com/debiatan/xrobot"&gt;link to the xrobot github repository&lt;/a&gt; and some sample code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xrobot&lt;/span&gt;

&lt;span class="n"&gt;xr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xrobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XRobot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XRobot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mouse_pos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Current mouse position: x =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;y =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c"&gt;# Press and release &amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;comma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c"&gt;# Press &amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;comma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c"&gt;# Release &amp;#39;,&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_resolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Screen width:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Screen height:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capture_screen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pl&lt;/span&gt;
&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="xrobot"></category></entry></feed>