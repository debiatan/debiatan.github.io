<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Transition Dreams - Miguel Lechón</title><link href="http://blog.debiatan.net/" rel="alternate"></link><link href="http://blog.debiatan.net/feeds/miguel-lechon.atom.xml" rel="self"></link><id>http://blog.debiatan.net/</id><updated>2016-02-23T19:00:00+01:00</updated><entry><title>Libdwarf with custom memory allocators</title><link href="http://blog.debiatan.net/libdwarf_with_custom_memory_allocators.html" rel="alternate"></link><published>2016-02-23T19:00:00+01:00</published><updated>2016-02-23T19:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2016-02-23:/libdwarf_with_custom_memory_allocators.html</id><summary type="html">&lt;!-- :subtitle: (well, one of them) --&gt;
&lt;p&gt;I've started writing a simple graphical debugger for the limited subset of C++ that Casey Muratori uses in &lt;a class="reference external" href="https://handmadehero.org/"&gt;Handmade Hero&lt;/a&gt; and I've already made two big mistakes. The first one is thinking that I could write a better GDB frontend than those available today, when the truth of the matter …&lt;/p&gt;</summary><content type="html">&lt;!-- :subtitle: (well, one of them) --&gt;
&lt;p&gt;I've started writing a simple graphical debugger for the limited subset of C++ that Casey Muratori uses in &lt;a class="reference external" href="https://handmadehero.org/"&gt;Handmade Hero&lt;/a&gt; and I've already made two big mistakes. The first one is thinking that I could write a better GDB frontend than those available today, when the truth of the matter is that &lt;a class="reference external" href="http://blog.debiatan.net/a_limitation_of_gdb_frontends.html"&gt;GDB does not want graphical frontends&lt;/a&gt;. The second one is using &lt;a class="reference external" href="http://www.prevanders.net/dwarf.html"&gt;libdwarf&lt;/a&gt; to parse the DWARF debug information of ELF binaries.&lt;/p&gt;
&lt;p&gt;What drove me to use libdwarf was Eli Bendersky's &lt;a class="reference external" href="http://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information"&gt;third article on debugging and linux&lt;/a&gt; (the other two talk about &lt;a class="reference external" href="http://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1"&gt;ptrace&lt;/a&gt; and &lt;a class="reference external" href="http://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints"&gt;implementing breakpoints&lt;/a&gt;) That article advises against trying to parse the DWARF section of an executable manually, arguing that DWARF is a very complex format, requiring the implementation of two &amp;quot;specialized virtual machines&amp;quot; to decode location data and line number data. I read that and thought &amp;quot;sure, let's give libdwarf a try&amp;quot;.&lt;/p&gt;
&lt;p&gt;While a cursory look at the DWARF spec makes me believe that libdwarf does, in fact, hide some of the complexity of the DWARF format, I've found that its API carries its own set of problems, particularly on the memory management side of things. The main complaint I have is that every time I make a call to libdwarf, it allocates space for the response under an opaque pointer and asks &lt;em&gt;me&lt;/em&gt; to remember the type of the request, so that later I can ask the library to free that memory. The natural consequence of such a design is that two thirds of the code that I write to interface with libdwarf end up being spent managing memory outside of my control.&lt;/p&gt;
&lt;p&gt;This example, extracted from the official documentation, illustrates my point (I've added the last &lt;tt class="docutils literal"&gt;else if&lt;/tt&gt; branch to avoid leaking memory through the error descriptor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;example1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dwarf_Die&lt;/span&gt; &lt;span class="n"&gt;somedie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Debug&lt;/span&gt; &lt;span class="n"&gt;dbg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Signed&lt;/span&gt; &lt;span class="n"&gt;atcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Attribute&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;atlist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Error&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Signed&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;errv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dwarf_attrlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;somedie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;atlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;atcount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errv&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DW_DLV_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;atcount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/* use atlist[i] */&lt;/span&gt;
            &lt;span class="n"&gt;dwarf_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atlist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;DW_DLA_ATTR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dwarf_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atlist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DW_DLA_LIST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errv&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DW_DLV_ERROR&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="cm"&gt;/* use error */&lt;/span&gt;
        &lt;span class="n"&gt;dwarf_dealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DW_DLA_ERROR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ** --&gt;
&lt;p&gt;This piece of code takes a DWARF Debug Information Entry and asks about its attributes (key-value pairs describing it, such as name, size, ...). If the number of attributes returned by the function is &lt;em&gt;n&lt;/em&gt;, then the number of &lt;tt class="docutils literal"&gt;dwarf_dealloc&lt;/tt&gt; calls needed will be &lt;em&gt;n+1&lt;/em&gt;, one for each of the attributes and another one for the list itself.&lt;/p&gt;
&lt;p&gt;Also, notice how libdwarf fails to keep track of the types of pointers it allocates, transferring that burden onto the caller. This means that every call to &lt;tt class="docutils literal"&gt;dwarf_dealloc&lt;/tt&gt; needs to specify one among these identifiers: &lt;tt class="docutils literal"&gt;DW_DLA_STRING&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LOC&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LOCDESC&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_ELLIST&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_BOUNDS&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_BLOCK&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_DEBUG&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_DIE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LINE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_ATTR&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_TYPE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_SUBSCR&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_GLOBAL_CONTEXT&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_ERROR&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LIST&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LINEBUF&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_ARANGE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_ABBREV&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_FRAME_OP&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_CIE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_FDE&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_LOC_BLOCK&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_FRAME_BLOCK&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_FUNC_CONTEXT&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_TYPENAME_CONTEXT&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_VAR_CONTEXT&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DW_DLA_WEAK_CONTEXT&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;DW_DLA_PUBTYPES_CONTEXT&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;That's a clear violation of the eighth item of Casey Muratori's 2004 &lt;a class="reference external" href="http://mollyrocket.com/873"&gt;Designing and Evaluating Reusable Components&lt;/a&gt; API design checklist (which, by the way, deserves a wider audience):&lt;/p&gt;
&lt;blockquote&gt;
Use of the component's resource management (memory, file, string, etc.) is completely optional.&lt;/blockquote&gt;
&lt;p&gt;In order to sidestep this issue, I've decided to modify libdwarf and make it use my own custom allocator functions, effectively taking control of memory back from the library. The last revision of libdwarf (January, 2016) makes 34 calls to &lt;tt class="docutils literal"&gt;malloc&lt;/tt&gt;, 10 to &lt;tt class="docutils literal"&gt;calloc&lt;/tt&gt;, 1 call to &lt;tt class="docutils literal"&gt;realloc&lt;/tt&gt; and under 100 calls to &lt;tt class="docutils literal"&gt;free&lt;/tt&gt;. I've gotten rid of the &lt;tt class="docutils literal"&gt;realloc&lt;/tt&gt; call, which  was only there because of some sloppy coding, and I've replaced the rest with calls to functions specified by the user through three extra parameters I've added to &lt;tt class="docutils literal"&gt;dwarf_init&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;My use case for libdwarf consists on parsing the whole binary in one go, building my own intermediate representation of the debugging information and, once I'm done, discarding all memory allocated through that library. That allows me to make my &lt;tt class="docutils literal"&gt;malloc&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;calloc&lt;/tt&gt; functions use a simple stack allocator and to replace &lt;tt class="docutils literal"&gt;free&lt;/tt&gt; with an empty function. Here's a barebones example of the way I use the tweaked libdwarf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Compile with: clang -std=c++11 -Wl,-export-dynamic,-rpath=. libdwarf.so \&lt;/span&gt;
&lt;span class="cm"&gt;   example.cc -o example -lelf */&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;libdwarf.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;MemoryArena&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;push_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MemoryArena&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;arena&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MemoryArena&lt;/span&gt; &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;stack_malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;push_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;stack_calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;push_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stack_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;){}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Memory arena initialization&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bytes_to_allocate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes_to_allocate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bytes_to_allocate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inferior&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ELF target&lt;/span&gt;

    &lt;span class="n"&gt;Dwarf_Debug&lt;/span&gt; &lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Dwarf_Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DW_DLC_READ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dbg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_malloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_calloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_free&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Call as many dwarf_* functions as necessary to build&lt;/span&gt;
    &lt;span class="c1"&gt;//  my own representation of debug information without&lt;/span&gt;
    &lt;span class="c1"&gt;//  worrying about dwarf_dealloc or dwarf_finish&lt;/span&gt;

    &lt;span class="c1"&gt;// Recycling of dwarf memory arena for other purposes&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;MemoryArena&lt;/span&gt; &lt;span class="n"&gt;some_other_arena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dwarf_arena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dwarf_arena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="c1"&gt;// Code that does something useful with the debug symbols&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ** --&gt;
&lt;p&gt;If you ever find yourself in a situation similar to mine, you can get the source of the modified libdwarf from &lt;a class="reference external" href="https://github.com/debiatan/libdwarf_custom_allocator"&gt;this github repository&lt;/a&gt;. You will also need to install the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libelf-dev&lt;/span&gt;&lt;/tt&gt; package that comes with you Linux distribution. &lt;strong&gt;However, I urge you to reconsider using libdwarf&lt;/strong&gt;. The obtuseness of it's memory allocation scheme is just my main complaint about it, but my dislike for its API does not stop there.&lt;/p&gt;
&lt;p&gt;Also, remember those two &lt;em&gt;terribly complicated&lt;/em&gt; &amp;quot;specialized virtual machines&amp;quot; Eli Bendersky mentioned? Turns out that libdwarf only implements one of them. Here's what libdwarf's documentation has to say about the other one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.22 Location Expression Evaluation&lt;/p&gt;
&lt;p&gt;An &amp;quot;interpreter&amp;quot; which evaluates a location expression is required in any debugger. There is no interface
defined here at this time.&lt;/p&gt;
&lt;p&gt;One problem with defining an interface is that operations are machine dependent: they depend on the
interpretation of register numbers and the methods of getting values from the environment the expression is
applied to.&lt;/p&gt;
&lt;p&gt;It would be desirable to specify an interface.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="debugger"></category><category term="linux"></category></entry><entry><title>A limitation of GDB frontends</title><link href="http://blog.debiatan.net/a_limitation_of_gdb_frontends.html" rel="alternate"></link><published>2016-02-17T19:00:00+01:00</published><updated>2016-02-17T19:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2016-02-17:/a_limitation_of_gdb_frontends.html</id><summary type="html">&lt;!-- :subtitle: (well, one of them) --&gt;
&lt;p&gt;GDB is an OK command-line debugger, but its not a solid foundation for graphical debuggers. According to the GDB documentation, the recommended way of interacting with the debugger is through &lt;a class="reference external" href="https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html"&gt;the GDB/MI interface&lt;/a&gt;, which offers almost the same functionality as the regular GDB command-line through an alternative text protocol …&lt;/p&gt;</summary><content type="html">&lt;!-- :subtitle: (well, one of them) --&gt;
&lt;p&gt;GDB is an OK command-line debugger, but its not a solid foundation for graphical debuggers. According to the GDB documentation, the recommended way of interacting with the debugger is through &lt;a class="reference external" href="https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html"&gt;the GDB/MI interface&lt;/a&gt;, which offers almost the same functionality as the regular GDB command-line through an alternative text protocol with a well-defined but somewhat obtuse grammar. If all we need is the ability to automate a GDB session, then GDB/MI is probably enough, but if we want our frontend to provide functionality not present in GDB, we may be out of luck.&lt;/p&gt;
&lt;p&gt;As an example, let's imagine we want to ask GDB about the value associated to a variable. In a regular command-line debugging session, we would issue a print command specifying the name of the variable and the debugger would look for it inside the blocks encompassing our current line to provide an answer.&lt;/p&gt;
&lt;p&gt;What happens, however, when we try to implement mouseover variable inspection? Suddenly, the current line can't act as an implicit location for our queries and the variable we want to inspect may not be uniquely identified by its name. Take for instance this run-of-the-mill piece of C++ code, representative of my coding style on Friday afternoons:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lets_break_here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="c1"&gt;// thing in a comment&lt;/span&gt;
  &lt;span class="cp"&gt;#if 0&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;              thing&lt;/span&gt;
&lt;span class="cp"&gt;  #endif&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Let's say we decide to stop on line five and inspect the values associated to all available &lt;tt class="docutils literal"&gt;thing&lt;/tt&gt;s using Emacs' gud-tooltip-mode.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Testing gdb-emacs" src="images/gdb_emacs.png" style="width: 599.0px; height: 484.0px;" /&gt;
&lt;/div&gt;
&lt;p&gt;The result are wrong most of the time. Maybe KDevelop has other thoughts on the matter...&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Testing gdb-kdevelop" src="images/gdb_kdevelop.png" style="width: 603.54px; height: 491.82px;" /&gt;
&lt;/div&gt;
&lt;p&gt;Not really. Qt-creator?&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Testing gdb-qtcreator" src="images/gdb_qtcreator.png" style="width: 612.72px; height: 513.36px;" /&gt;
&lt;/div&gt;
&lt;p&gt;This one at least does not fall for the commented &lt;tt class="docutils literal"&gt;thing&lt;/tt&gt; and even acknowledges the existence of other types of &lt;tt class="docutils literal"&gt;thing&lt;/tt&gt;s somewhere else in the program. But still, I'm beginning to suspect that GDB frontend programmers don't usually debug the sort of code I tend to work on. The results are the same for Eclipse's CDT standalone debugger and for DDD. I can't say what CLion and Nemiver do, because they refuse to work on my machine.&lt;/p&gt;
&lt;p&gt;Figuring out the lexical scope of variables in C programs is not &lt;em&gt;that&lt;/em&gt; hard. All these frontends fail to implement it properly because GDB makes it hard for them. Sure, they could issue an &lt;tt class="docutils literal"&gt;info scope 7&lt;/tt&gt; command and find out the addresses and sizes of all variables relative to the stack base pointer for all scopes encompassing line seven:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Scope for 7:
Symbol thing is a variable at frame base reg $rbp offset 0+-17, length 1.
Symbol thing is a variable at frame base reg $rbp offset 0+-12, length 4.
Symbol lets_break_here is a variable at frame base reg $rbp offset 0+-16, length 4.
Symbol thing is a variable at frame base reg $rbp offset 0+-8, length 4.
&lt;/pre&gt;
&lt;p&gt;Then, they would only need to infer somehow which &lt;tt class="docutils literal"&gt;thing&lt;/tt&gt;'s which, find its type and format its value accordingly. At this point it may be easier to read the DWARF debug information directly and avoid GDB altogether.&lt;/p&gt;
&lt;p&gt;Or we could just purchase a Windows license, download Visual Studio Community Whatever, register it and...&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Testing Visual Studio's debugger" src="images/gdb_visual_studio.png" style="width: 613.8px; height: 644.4px;" /&gt;
&lt;p class="caption"&gt;Oops!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I suppose the problem here is that the Visual Studio team cares mostly about C#, and since C# does not allow variables with the same name in nested scopes...&lt;/p&gt;
</content><category term="debugger"></category><category term="linux"></category></entry><entry><title>inDRM: Copy control with a personal touch</title><link href="http://blog.debiatan.net/inDRM.html" rel="alternate"></link><published>2015-04-01T10:00:00+02:00</published><updated>2015-04-01T10:00:00+02:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2015-04-01:/inDRM.html</id><summary type="html">&lt;p&gt;I was born in 1981, but I still got late to the PC party. My first computer was a Pentium 100, 8 MB RAM, 850 MB HDD, 14-inch CRT beast. My parents bought it for my brother and me on December 1995.&lt;/p&gt;
&lt;p&gt;Some weeks before lugging it home, I was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was born in 1981, but I still got late to the PC party. My first computer was a Pentium 100, 8 MB RAM, 850 MB HDD, 14-inch CRT beast. My parents bought it for my brother and me on December 1995.&lt;/p&gt;
&lt;p&gt;Some weeks before lugging it home, I was already making preparations. I bought a case of ten 3.5-inch floppies and headed to the local chess club. They had a 486 that people were supposed to use to study and play chess, but it also moonlighted as a software stash for club members under 25. That afternoon I spent twenty minutes swapping floppies in and out of the computer, labeling them as &lt;tt class="docutils literal"&gt;Mortal Kombat II RAR Volume 1/8&lt;/tt&gt;, etc. That same procedure would have to be reenacted backwards at home, once a beige box graced my desk with its presence.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Was it worth it?&lt;/em&gt; Yes. &lt;em&gt;Did I play the game much?&lt;/em&gt; I played the hell out of it that Xmas. &lt;em&gt;Why are you telling me this stuff?&lt;/em&gt; Because I want to talk about...&lt;/p&gt;
&lt;div class="section" id="compromise"&gt;
&lt;h2&gt;Compromise&lt;/h2&gt;
&lt;p&gt;Look. In order to play that thing, I had to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Walk twenty minutes to the chess club&lt;/li&gt;
&lt;li&gt;Pester someone to get my turn at the computer&lt;/li&gt;
&lt;li&gt;Wait twenty more minutes in front of it&lt;/li&gt;
&lt;li&gt;Walk back home&lt;/li&gt;
&lt;li&gt;Spend twenty extra minutes unRARing the stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all that, I would have played the game even if it sucked! Maybe it sucked and I didn't notice!&lt;/p&gt;
&lt;p&gt;I invested some of my time in getting it running so, had it failed to meet my expectations, I would have been left with these two options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deciding that I was stupid for wasting a perfectly good afternoon&lt;/li&gt;
&lt;li&gt;Tricking myself into thinking that the game was good&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Back then, I didn't think of myself as a stupid person, so I would have gone for the second one. Of course, the game was &lt;em&gt;actually&lt;/em&gt; good, so it's a moot point. But anyways, what's the moral of the story?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wasting-the-time-of-players-increases-the-subjective-appeal-of-games"&gt;
&lt;h2&gt;Wasting the &lt;strong&gt;time&lt;/strong&gt; of players increases the subjective appeal of games&lt;/h2&gt;
&lt;p&gt;Which is kind of tragic, given today's sorry state of software distribution.  People don't go to game stores anymore. They don't ask their friends for games, either. They just wait for the &lt;em&gt;Steam&lt;/em&gt; sale, whip out a credit card and pay a visit to the fridge while their game downloads. Where's the compromise in that?&lt;/p&gt;
&lt;p&gt;We can do better. Up for some unsolicited advice? Thought so.&lt;/p&gt;
&lt;p&gt;If you're a game developer and want your stuff to be noticed, forget &lt;em&gt;greenlight&lt;/em&gt;. What you need is &lt;strong&gt;20th century game distribution&lt;/strong&gt; and you know it. The days of tapes and floppies may be long gone, but when everything seems lost, you can always count on good old...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="d-r-m"&gt;
&lt;h2&gt;D.R.M.&lt;/h2&gt;
&lt;p&gt;Here's my proposal:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Upload your game somewhere and force your first users to contact you to get an activation key. (&lt;tt class="docutils literal"&gt;wasted time + social interaction = ugly experience&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Since you don't want to spend all day handing keys over, unload that burden on your players. Make it so that &lt;strong&gt;every unlocked copy of your game is capable of generating valid activation keys&lt;/strong&gt; (&lt;tt class="docutils literal"&gt;oh this game has to be reaally good if im answering peoples emails just because i wrote in a forum that i was playing it&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's the gist of the &lt;tt class="docutils literal"&gt;inDRM&lt;/tt&gt; copy control scheme, my contribution to &lt;a class="reference external" href="http://www.sigbovik.org/2015/"&gt;this year's SIGBOVIK conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to know more, check &lt;a class="reference external" href="https://github.com/debiatan/inDRM/blob/master/doc/article.pdf"&gt;the article&lt;/a&gt; and browse the &lt;a class="reference external" href="https://github.com/debiatan/inDRM"&gt;associated GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-games-using-indrm"&gt;
&lt;h2&gt;List of games using inDRM&lt;/h2&gt;
&lt;p&gt;None so far, but they're coming.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SIGBOVIK"></category><category term="games"></category><category term="cryptography"></category></entry><entry><title>Five weeks of Handmade Hero</title><link href="http://blog.debiatan.net/five-weeks-of-handmade-hero.html" rel="alternate"></link><published>2015-03-13T13:00:00+01:00</published><updated>2015-03-13T13:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2015-03-13:/five-weeks-of-handmade-hero.html</id><summary type="html">&lt;p&gt;You may be aware that Barcelona holds a couple dozen Mobile World Congresses a year. However, you probably ignore that there are other technological meetings in Barcelona that far surpass the MWC by any metric you can think of. The &lt;a class="reference external" href="http://www.qidv.org/"&gt;QIDV&lt;/a&gt; (&lt;em&gt;Quedadas informales de desarrollo de videojuegos&lt;/em&gt;, Meetups about Game …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You may be aware that Barcelona holds a couple dozen Mobile World Congresses a year. However, you probably ignore that there are other technological meetings in Barcelona that far surpass the MWC by any metric you can think of. The &lt;a class="reference external" href="http://www.qidv.org/"&gt;QIDV&lt;/a&gt; (&lt;em&gt;Quedadas informales de desarrollo de videojuegos&lt;/em&gt;, Meetups about Game Development) are the most prominent example.&lt;/p&gt;
&lt;p&gt;For the tenth edition of these gatherings, I decided to give a talk to raise awareness of Casey Muratori's &lt;a class="reference external" href="https://handmadehero.org/"&gt;Handmade Hero&lt;/a&gt; project. I tried to summarize the highlights of the first five weeks in just fifteen minutes, explaining mainly the architectural decisions that support the live code editing capabilities of his platform layer.&lt;/p&gt;
&lt;p&gt;If you couldn't come but understand Spanish, I invite you to take a look at the recording of the session:&lt;/p&gt;
&lt;p&gt;Here's just the fun part (the demo) at the end:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://www.youtube.com/embed/0vHt8qBOumc?start=758&amp;feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;And here's the whole thing:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://www.youtube.com/embed/0vHt8qBOumc?start=228&amp;feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;If you don't feel satisfied by my bare bones explanation of the technical details, please resort to this &lt;a class="reference external" href="http://nullprogram.com/blog/2014/12/23/"&gt;nicely written post about the subject&lt;/a&gt;. If that still doesn't do the trick, you can always watch &lt;a class="reference external" href="https://youtu.be/oijEnriqqcs"&gt;the original Handmade Hero video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content><category term="games"></category><category term="handmade_hero"></category><category term="QIDV"></category></entry><entry><title>Acampa como puedas</title><link href="http://blog.debiatan.net/acampa-como-puedas.html" rel="alternate"></link><published>2015-01-27T07:00:00+01:00</published><updated>2015-01-27T07:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2015-01-27:/acampa-como-puedas.html</id><summary type="html">&lt;p&gt;This weekend I took part in the seventh edition of the &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt;. The goal of the event is to create a game related in some way to a given theme in 48 hours. This year's theme was &lt;em&gt;What do we do now?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of flying solo, as I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This weekend I took part in the seventh edition of the &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt;. The goal of the event is to create a game related in some way to a given theme in 48 hours. This year's theme was &lt;em&gt;What do we do now?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of flying solo, as I did last year, I joined two friends: &lt;a class="reference external" href="http://tamats.com/blog/"&gt;Javi&lt;/a&gt; and Esteban. It payed off big time, not only because &lt;em&gt;jamming alone&lt;/em&gt; doesn't make any sense (I can code by myself any weekend I so desire -- which is most of them), but also because I jammed in good company and &lt;a class="reference external" href="https://gamejambcn.com/en/resultats-danys-anteriors/resultats-2015/"&gt;we fucking won the local Barcelona section of the jam&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Gorilla-bears chasing dinner." src="images/acampa_attack.jpg" style="width: 372.0px; height: 232.0px;" /&gt;
&lt;p class="caption"&gt;Gorilla-bears chasing dinner.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want a detailed account on how it went or some technical tips to play the game, I refer you to &lt;a class="reference external" href="http://www.tamats.com/blog/?p=665"&gt;Javi's write-up&lt;/a&gt;. Other than that, here's the &lt;a class="reference external" href="http://globalgamejam.org/2015/games/acampa-como-puedas"&gt;profile of the game at the GGJ web page&lt;/a&gt; and &lt;a class="reference external" href="http://tamats.com/games/ggj15"&gt;a link to the game&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;p&gt;(UPDATE) Here's the presentation of the game Javi gave at the end of the jam:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://www.youtube.com/embed/ZnF-WKUu5Tw?start=412&amp;feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</content><category term="games"></category><category term="GGJ"></category></entry><entry><title>Oscilloscope</title><link href="http://blog.debiatan.net/oscilloscope.html" rel="alternate"></link><published>2014-11-25T18:00:00+01:00</published><updated>2014-11-25T18:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-11-25:/oscilloscope.html</id><summary type="html">&lt;p&gt;It seems that building an oscilloscope on top of an Arduino board is some sort of rite of passage. Do a &lt;a class="reference external" href="https://duckduckgo.com/?q=arduino+oscilloscope"&gt;duckduckgo&lt;/a&gt; search and you will see that all the good names for this kind of project are already taken, so I have decided to name mine just &lt;em&gt;oscilloscope&lt;/em&gt;. In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It seems that building an oscilloscope on top of an Arduino board is some sort of rite of passage. Do a &lt;a class="reference external" href="https://duckduckgo.com/?q=arduino+oscilloscope"&gt;duckduckgo&lt;/a&gt; search and you will see that all the good names for this kind of project are already taken, so I have decided to name mine just &lt;em&gt;oscilloscope&lt;/em&gt;. In my defense, I'll say that I have written mine because I needed the most basic of oscilloscopes and it's just easier to build one from scratch than to adapt some already existing code.&lt;/p&gt;
&lt;p&gt;I've written my oscilloscope code it in order to inspect a single-channel periodic signal with a frequency close to 250 Hz. My first trivial attempt at the task already recorded the signal at 5 kHz and transmitted it over USB without the need to buffer data in the RAM of the microcontroller, so I haven't bothered speeding it up.&lt;/p&gt;
&lt;p&gt;The main bottleneck in my case is the serial transmission. Trying to collect more than 5800 samples per second will likely result in the loss of some of them. I've written some extra code that checks for missing samples, but it never detects problems at 5 kHz and, frankly, I'm OK with twenty samples per cycle.&lt;/p&gt;
&lt;p&gt;All in all, putting together the &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; firmware and the &lt;tt class="docutils literal"&gt;Python&lt;/tt&gt; client, the project takes less than 130 lines. The program that checks for periodicity, finds the frequency and aligns the cycles to display them adds 90 extra lines. The output of this program looks like this:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Jiggling periodic wave" src="images/oscilloscope.gif" style="width: 406.0px; height: 306.0px;" /&gt;
&lt;p class="caption"&gt;Visualization of several cycles of a PWM signal at 250 Hz after going through a simple RC circuit.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://github.com/debiatan/oscilloscope"&gt;link to the github repository&lt;/a&gt;.&lt;/p&gt;
</content><category term="arduino"></category><category term="oscilloscope"></category></entry><entry><title>Distortion Vector Field</title><link href="http://blog.debiatan.net/guybrush.html" rel="alternate"></link><published>2014-08-25T08:00:00+02:00</published><updated>2014-08-25T08:00:00+02:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-08-25:/guybrush.html</id><summary type="html">&lt;p&gt;Just to keep the blog rolling, I'm posting this ten-second clip of Guybrush Threepwood coming into existence from some sort of primordial soup of pixels.&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/104247325?app_id=122963" frameborder="0" title="Guybrush materializes" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;On the left, you can see the distortion field applied to the original image to deform it. It consists of a field of vectors, each …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just to keep the blog rolling, I'm posting this ten-second clip of Guybrush Threepwood coming into existence from some sort of primordial soup of pixels.&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/104247325?app_id=122963" frameborder="0" title="Guybrush materializes" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;On the left, you can see the distortion field applied to the original image to deform it. It consists of a field of vectors, each of them centered on a pixel of the image, following a 2D &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ornstein–Uhlenbeck_process"&gt;Ornstein-Uhlenbeck process&lt;/a&gt;. They are convolved with a Gaussian kernel that grows as the video steps forward.&lt;/p&gt;
</content><category term="graphical effects"></category></entry><entry><title>Unit-Test-Based Programming</title><link href="http://blog.debiatan.net/utbp.html" rel="alternate"></link><published>2014-04-01T10:00:00+02:00</published><updated>2014-04-01T10:00:00+02:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-04-01:/utbp.html</id><summary type="html">&lt;p&gt;UTBP is a new subparadigm of Declarative Programming, in which code is generated from a description of its intended behavior, specified through unit tests. This work was presented at &lt;a class="reference external" href="http://www.sigbovik.org/2014/"&gt;SIGBOVIK 2014&lt;/a&gt; and received the &lt;em&gt;Most Frighteningly Like Real Research&lt;/em&gt; Award.&lt;/p&gt;
&lt;p&gt;For an in-depth tour of UTBP, you can check &lt;a class="reference external" href="https://github.com/debiatan/utbp/blob/master/doc/article.pdf"&gt;the …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;UTBP is a new subparadigm of Declarative Programming, in which code is generated from a description of its intended behavior, specified through unit tests. This work was presented at &lt;a class="reference external" href="http://www.sigbovik.org/2014/"&gt;SIGBOVIK 2014&lt;/a&gt; and received the &lt;em&gt;Most Frighteningly Like Real Research&lt;/em&gt; Award.&lt;/p&gt;
&lt;p&gt;For an in-depth tour of UTBP, you can check &lt;a class="reference external" href="https://github.com/debiatan/utbp/blob/master/doc/article.pdf"&gt;the article&lt;/a&gt; and browse the &lt;a class="reference external" href="https://github.com/debiatan/utbp"&gt;associated GitHub repository&lt;/a&gt;. If you prefer a light introduction, you can choose between two versions of the same video. This one is dubbed:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/89179353?app_id=122963" frameborder="0" title="Unit-Test-Based Programming -- English dubbing" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This one is subbed:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/89182858?app_id=122963" frameborder="0" title="Unit-Test-Based Programming -- English subtitles" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</content><category term="unit tests"></category><category term="SIGBOVIK"></category><category term="automatic programming"></category></entry><entry><title>Gradius meets Twister</title><link href="http://blog.debiatan.net/gradius-meets-twister.html" rel="alternate"></link><published>2014-01-27T20:00:00+01:00</published><updated>2014-01-27T20:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-01-27:/gradius-meets-twister.html</id><summary type="html">&lt;p&gt;This weekend I participated in the sixth edition of the &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt; . The goal of the event was to create a game related in some way to a given theme in 48 hours. This year's theme was &lt;em&gt;We don't see things as they are, we see them as we …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This weekend I participated in the sixth edition of the &lt;a class="reference external" href="http://globalgamejam.org/"&gt;Global Game Jam&lt;/a&gt; . The goal of the event was to create a game related in some way to a given theme in 48 hours. This year's theme was &lt;em&gt;We don't see things as they are, we see them as we are&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I decided to go for a multiplayer Gradius clone in which collisions with enemies remap your controls. I developed it using &lt;a class="reference external" href="http://www.codeskulptor.org/"&gt;CodeSkulptor&lt;/a&gt;, which is basically a Python interpreter running on top of Javascript. Needless to say, it's no speed demon. See for yourself:&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/85182232?app_id=122963" frameborder="0" title="Gradius meets Twister" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;If you want to give it a try, I have two suggestions to make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find someone to play against (otherwise is going to look as sad as my single player game above).&lt;/li&gt;
&lt;li&gt;Run it on Chrome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="http://www.globalgamejam.org/2014/games/gradius-meets-twister"&gt;profile of the game at the GGJ webpage&lt;/a&gt; and &lt;a class="reference external" href="http://www.codeskulptor.org/#user36_Z3QPgd5jeF_98.py"&gt;a link to the game&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Looks like &lt;a class="reference external" href="https://gamejambcn.com/gjb-2014/resultats/"&gt;my game placed third&lt;/a&gt; on the local vote we held after the Jam! Hooray!&lt;/p&gt;
</content><category term="codeskulptor"></category><category term="games"></category><category term="GGJ"></category></entry><entry><title>xrobot</title><link href="http://blog.debiatan.net/xrobot.html" rel="alternate"></link><published>2014-01-02T10:00:00+01:00</published><updated>2014-01-02T10:00:00+01:00</updated><author><name>Miguel Lechón</name></author><id>tag:blog.debiatan.net,2014-01-02:/xrobot.html</id><summary type="html">&lt;p&gt;Every once in a while, I need to step outside the command line. Sometimes I'm even forced to interact with &lt;em&gt;deaf&lt;/em&gt; graphical programs, those that do not listen to standard input or a meager HTTP port. In those desperate times, were it not for tools such as &lt;a class="reference external" href="http://xautomation.sf.net/"&gt;XAUT&lt;/a&gt; or &lt;a class="reference external" href="http://www.semicomplete.com/blog/projects/xdotool/"&gt;xdotool …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every once in a while, I need to step outside the command line. Sometimes I'm even forced to interact with &lt;em&gt;deaf&lt;/em&gt; graphical programs, those that do not listen to standard input or a meager HTTP port. In those desperate times, were it not for tools such as &lt;a class="reference external" href="http://xautomation.sf.net/"&gt;XAUT&lt;/a&gt; or &lt;a class="reference external" href="http://www.semicomplete.com/blog/projects/xdotool/"&gt;xdotool&lt;/a&gt;, I would have to type and click outside of &lt;tt class="docutils literal"&gt;VIM&lt;/tt&gt;, like cavemen probably did.&lt;/p&gt;
&lt;p&gt;Those two little programs are enough to make me happy when confronted with an X11 server. However, my computer, of a more whimsical nature, is reluctant to execute binaries other than a Python interpreter (like any other well-meaning general-purpose device assembled during the 21st century, really). That is why I have decided to write the simplest Python library I could think of that is able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find out the position of the mouse pointer&lt;/li&gt;
&lt;li&gt;Move the mouse pointer around the screen&lt;/li&gt;
&lt;li&gt;Press and release mouse buttons&lt;/li&gt;
&lt;li&gt;Press and release keys in the keyboard&lt;/li&gt;
&lt;li&gt;Capture the screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;xrobot&lt;/tt&gt; library is lean, simple and Python[23]-compliant. It is just a wrapper around functions defined inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-xlib&lt;/span&gt;&lt;/tt&gt;. Since Xlib screen capture is painfully slow, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-gtk&lt;/span&gt;&lt;/tt&gt; bindings are used instead, if present. I have decided to return images as &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; arrays for my convenience; if you find that dependency unbearable, you can root it out easily from the code.&lt;/p&gt;
&lt;div class="flex-video widescreen" style="margin: 0 auto;text-align:center;"&gt;
&lt;iframe src="https://player.vimeo.com/video/83220240?app_id=122963" frameborder="0" title="5000 clicks" allow="autoplay; fullscreen" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p class="caption-text"&gt;Here's me, at five hundred clicks/second.&lt;/p&gt;
&lt;p&gt;I leave you with a &lt;a class="reference external" href="https://github.com/debiatan/xrobot"&gt;link to the xrobot github repository&lt;/a&gt; and some sample code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xrobot&lt;/span&gt;

&lt;span class="n"&gt;xr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xrobot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XRobot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XRobot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mouse_pos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Current mouse position: x =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# Press and release &amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Press &amp;#39;,&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# Release &amp;#39;,&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_resolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Screen width:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Screen height:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capture_screen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pylab&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pl&lt;/span&gt;
&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="xrobot"></category></entry></feed>